<?php

namespace RM\Thorin\Generators;

use Nette\Object;
use Nette\Utils\Image;
use RM\Thorin\Descriptor;
use RM\Thorin\InvalidArgumentException;
use RM\Thorin\IGenerator;
use RM\Thorin\IRouter;

/**
 * Generator of images to defined webtemp.
 *
 * @author Roman Mátyus
 * @copyright (c) Roman Mátyus 2015
 * @license MIT
 */
class WebTempGenerator extends Object implements IGenerator
{
	/** @var callable[] function(Image $image); Occurs when is image generated, before save a file. */
	public $onCompile;

	/** @var callable[] function(path $filePath); Occurs after render image to file. */
	public $onAfterRender;

	/** @var string Path to directory with saved images */
	protected $destinationPath;

	/** @var bool Generate image only on link generate? */
	protected $lazy = TRUE;

	/** @var IRouter */
	protected $router;


	/**
	 * @param IRouter $router
	 * @param string  $destinationPath
	 * @param boolean $lazy
	 */
	public function __construct($destinationPath, $lazy = TRUE, IRouter $router)
	{
		$this->router = $router;

		if (!file_exists($destinationPath))
			throw new InvalidArgumentException("Destination '".((realpath($destinationPath))?realpath($destinationPath):$destinationPath)."' not exists.");

		elseif (!is_dir($destinationPath))
			throw new InvalidArgumentException("Destination '".((realpath($destinationPath))?realpath($destinationPath):$destinationPath)."' must be directory.");

		elseif (!is_writable($destinationPath))
			throw new InvalidArgumentException("Destination '".((realpath($destinationPath))?realpath($destinationPath):$destinationPath)."' must be writable.");

		$this->destinationPath = $destinationPath;
		$this->lazy = $lazy;
	}


	/**
	 * Sets whether is file generated lazy.
	 * @param  boolean $lazy
	 * @return self
	 */
	public function setLazy($lazy = TRUE)
	{
		if (!is_bool($lazy))
			throw new InvalidArgumentException("First argument '\$lazy' must be 'boolean', not '" . gettype($lazy) . "'.");

		$this->lazy = $lazy;
		return $this;
	}


	/**
	 * Get usable link for application from Descriptor.
	 * @param  Descriptor $descriptor
	 * @return string
	 */
	public function getLink(Descriptor $descriptor)
	{
		$link = $this->router->getLink($descriptor);

		if (!$this->lazy||!$descriptor->isLazy())
			$this->generateImage($descriptor, $link);

		return $link;
	}


	/**
	 * Generate Image from link generated by method getLink().
	 * @param  string $link
	 * @return Image
	 */
	public function getImage($link)
	{
		$descriptor = $this->router->getDescriptor($link);
		if ($descriptor instanceof Descriptor)
			return $this->generateImage($descriptor, $link);
	}


	/**
	 * Generate image from Descriptor to file.
	 * @param  Descriptor $descriptor
	 * @param  string     $link
	 * @return Image
	 */
	private function generateImage(Descriptor $descriptor, $link)
	{
		$i = $descriptor->getGeneratedImage();

		$this->onCompile($i);

		$destination = $this->destinationPath . DIRECTORY_SEPARATOR . $descriptor->getNamespace();
		if (!is_dir($destination))
			mkdir($destination, 0777, TRUE);

		$filePath = $this->destinationPath . DIRECTORY_SEPARATOR . $descriptor->getNamespace() . basename($link);

		$i->save($filePath);

		$this->onAfterRender($filePath);

		return Image::fromFile($filePath);
	}

}
